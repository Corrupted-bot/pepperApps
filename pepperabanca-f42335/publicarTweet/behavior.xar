<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="Abanca/pepperSelfie/publicarFoto" type="0" type_size="1" nature="4" stm_value_name="Abanca/pepperSelfie/publicarFoto" inner="1" tooltip="Abanca/pepperSelfie/publicarFoto desc" id="4" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="publicarTweet" id="14" localization="8" tooltip="" x="134" y="82">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[from subprocess import call
import random
import requests

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.connection = ALProxy("ALConnectionManager")
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        ##### Desconectamos pepper de la cámara y lo conectamos a la red
        try:
            self.connection.scan()
            servicios = self.connection.services()
            idWifiRed = ""
            idWifiCamara = ""

            frases = ["Aprendiendo a hacer selfies con mis nuevos amigos #somosabanca","Mis nuevos amigos #somosabanca"]
            message = random.choice(frases)
            #self.logger.info("Frase" + message)

            fileWifi = open("/var/www/apps/"+self.packageUid()+"/wifi.txt", 'r')
            nombreWifi = fileWifi.readline()
            nombreWifi = nombreWifi.strip()
            #self.logger.info("Nombre wifi: " + nombreWifi)

            for serv in servicios:
                network = dict(serv)
                if (network["Name"] == str(nombreWifi)):
                    idWifiRed = network["ServiceId"]
                if (network["Name"] == "DIRECT-mhQ0:DSC-QX10"):
                    idWifiCamara = network["ServiceId"]

            self.logger.info("Wifi Red:" + idWifiRed)
            self.logger.info("Wifi Camara:" + idWifiCamara)

            if (idWifiRed == "" or idWifiCamara == ""):
                self.logger.info("Fallo al publicar")
                self.onStopped()
            else:
                self.connection.disconnect(idWifiCamara)
                time.sleep(2)
                self.connection.connect(idWifiRed)
                time.sleep(5)

        #        self.memory.insertData("pepperAbanca/disco", str(dis))
        #        self.memory.insertData("pepperAbanca/conn", str(con))

                ##### Publicamos la foto
                #message = 'Fotico mañanera jejeje'
                #command = "python /var/www/apps/"+self.packageUid()+"/publishImage.py '"+message+"' '"+self.packageUid()+"'"
                #self.logger.info("comando: "+command)
                #call(command, shell=True)

                self.logger.info("subinendo fooooot ")
                headers = {'enctype': 'multipart/form-data'}
                name = '/var/www/apps/'+self.packageUid()+'/html/images/local-image.jpg'
                files={'file': open(name,'rb')}
                subida = requests.post('http://192.168.1.150:8888/upload/upload.php',files=files ,headers=headers)


                self.logger.info("subida")

                ##### Reconectamos pepper a la cámara
                time.sleep(3)
                self.connection.scan()
                servicios = self.connection.services()
                idWifiRed = ""
                idWifiCamara = ""
                for serv in servicios:
                    network = dict(serv)
                    if (network["Name"] == str(nombreWifi)):
                        idWifiRed = network["ServiceId"]
                    if (network["Name"] == "DIRECT-mhQ0:DSC-QX10"):
                        idWifiCamara = network["ServiceId"]

                self.logger.info("Wifi Red:" + idWifiRed)
                self.logger.info("Wifi Camara:" + idWifiCamara)

                self.connection.disconnect(idWifiRed)
                time.sleep(2)
                self.connection.connect(idWifiCamara)
                #self.connection.connect(idWifiRed)

                #self.logger.info("Aqui 9")

                self.onStopped() #activate the output of the box
        except OSError as err:
            self.logger.info("Algo no ha ido bien")
            self.onStopped()
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
