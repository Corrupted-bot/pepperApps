import qi


class EventsHandler():

    requirements = ["ALMemory"]

    def __init__(self, session):
        self.session = session
        self.memory = self.session.service("ALMemory")
        self.subscribers_list = []

    def connect_callback(self, event_name, callback_func, service_name=None):
        """ the arguments of the callback_func should be
            (value) or (self, value)
        """
        if service_name is None:
            subscriber = self.memory.subscriber(event_name)
            subscriber.signal.connect(callback_func)
        else:
            connectable = getattr(self.session.service(service_name),
                                  event_name)
            subscriber = connectable.connect(callback_func)
        self.subscribers_list.append(subscriber)

    def connect_callbacks_dict(self, callbacks_dict):
        for event_name, callback_func in callbacks_dict.iteritems():
            self.connect_callback(event_name, callback_func)

    def disconnect_all_callbacks(self):
        del self.subscribers_list[:]

    def get_proxy(self, module_name):
        try:
            return self.session.service(module_name)
        except RuntimeError, error:
            print "Couldn't get proxy:", module_name + ", got error:", error
            return None

    def read_mem_key(self, key_name):
        return self.memory.getData(key_name)

    def raise_event(self, event_name, value):
        self.memory.raiseEvent(event_name, value)

    @staticmethod
    def get_event_short_name(event_name):
        split_name = event_name.split("/")
        return "/".join(split_name[1:])
