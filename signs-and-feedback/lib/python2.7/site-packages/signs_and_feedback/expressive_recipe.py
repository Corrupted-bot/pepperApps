#-*- coding: utf-8 -*-
from utils.utils import get_value_or_none, check_assign
from expressive_nodes import ExpressiveSimultaneousNode


class ExpressiveRecipe(object):

    def __init__(self, recipe_dict, bits_dict, session, logger):
        super(ExpressiveRecipe, self).__init__()
        self.logger = logger
        self.name = recipe_dict["expressive_recipe"]
        check_assign(self, "trigger", recipe_dict)
        check_assign(self, "bit_name", recipe_dict, "bit")
        # handle old-style simultaneous bit coding
        if type(self.bit_name) == list:
            new_bit = ExpressiveSimultaneousNode.make_from_arguments(
                self.name + "Bit", self.bit_name, session, logger)
            new_bit.get_children_bits(bits_dict)
            bits_dict[new_bit.name] = new_bit
            self.bit_name = new_bit.name
        self.logger.assert_warning(
            self.bit_name in bits_dict,
            "ExpressiveBit \"" + self.bit_name + "\" wasn't specified")
        self.bit = bits_dict[self.bit_name]
        self.logger.info(self.name + " - bit:" + str(self.bit))
        self.stop = get_value_or_none("stop", recipe_dict)
        if self.stop is None:
            self.stop = []
        elif type(self.stop) != list:
            self.stop = [self.stop]

    def check_consistency(self):
        """ check consistency of the recipe
        """
        self.logger.info("Check consistency for: " + self.bit_name)
        if self.bit.get_is_continuous():
            self.logger.assert_warning(
                self.stop != [],
                "No stop condition specified for ExpressiveRecipe \""
                    + self.name +
                    "\", though ExpressiveBit \"" + self.bit.name +
                    "\" was flagged as \"Continuous\"")
