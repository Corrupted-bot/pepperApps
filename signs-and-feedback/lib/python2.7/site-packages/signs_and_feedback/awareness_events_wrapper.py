from utils.events_handler import EventsHandler
import qi


@qi.singleThreaded()
class AwarenessEventsWrapper(object):

    event_prefix = "ALSignsAndFeedback"

    # high-level events: people detection
    human_found = event_prefix + "/HumanFound"
    human_lost_after_tracking = event_prefix + "/HumanLostAfterTracking"

    # high-level events: people detection and stimuli
    human_found_after_stimulus = event_prefix + "/HumanFoundAfterStimulus"
    human_found_directly = event_prefix + "/HumanFoundDirectly"
    no_human_found_after_stimulus = event_prefix + "/NoHumanFoundAfterStimulus"

    # high-level events: stimuli detection
    touch_detected = event_prefix + "/TouchDetected"
    tablet_touch_detected = event_prefix + "/TabletTouchDetected"
    sound_detected = event_prefix + "/SoundDetected"
    movement_detected = event_prefix + "/MovementDetected"
    close_movement_detected = event_prefix + "/CloseMovementDetected"


    events = [
        touch_detected, tablet_touch_detected, sound_detected,
        movement_detected, close_movement_detected, human_found_after_stimulus,
        no_human_found_after_stimulus, human_found, human_found_directly,
        human_lost_after_tracking,
    ]

    requirements = []

    def __init__(self, session, logger):
        super(AwarenessEventsWrapper, self).__init__()
        self.logger = logger
        self.current_id = None
        self.last_detection_event = None

        # connect callbacks
        callback_dict = {
            "ALBasicAwareness/HumanTracked": self.on_human_tracked,
            "ALBasicAwareness/HumanLost": self.on_human_lost,
            "ALBasicAwareness/StimulusDetected": self.on_stim_detected,
        }
        self.event_handler = EventsHandler(session)
        for name_event, callback in callback_dict.iteritems():
            self.event_handler.connect_callback(name_event, callback)

    def on_human_tracked(self, id_human):
        self.logger.info("AwarenessEventsWrapper: callback: " +
                         "on_human_tracked, ID=" + str(id_human))
        if self.last_detection_event == "stim_non_people":
            if id_human == -1:
                self.raise_event("NoHumanFoundAfterStimulus")
                self.current_id = None
            else:
                if id_human == self.current_id:
                    self.raise_event(self.no_human_found_after_stimulus)
                else:
                    self.raise_event(self.human_found_after_stimulus)
                    self.raise_event(self.human_found)
                self.current_id = id_human
        self.last_detection_event = "human"

    def on_human_lost(self, value):
        self.current_id = None
        self.raise_event("HumanLostAfterTracking")

    def on_stim_detected(self, stim_name):
        if stim_name == "People":
            if self.current_id is None:
                self.last_detection_event = "stim_people"
                self.raise_event(self.human_found_directly)
                self.raise_event(self.human_found)
        else:
            self.last_detection_event = "stim_non_people"
            self.raise_event(self.event_prefix + "/" + stim_name +
                             "Detected")

    def raise_event(self, name_event):
        self.logger.info("AwarenessEventsWrapper: triggering event:",
                         name_event)
        self.event_handler.raise_event(name_event, None)
