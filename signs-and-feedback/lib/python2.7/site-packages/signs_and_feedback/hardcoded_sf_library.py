import time
import qi


class BitsLibrary(object):
    """Hardcoded ExpressiveBits"""

    requirements = [
        "ALMotion",
        "ALLeds",
        "ALAudioPlayer",
        "ALAutonomousBlinking",
        "ALSpeechRecognition",
    ]

    def __init__(self, session, logger):
        super(BitsLibrary, self).__init__()
        self.session = session
        self.logger = logger
        self.motion = self.session.service("ALMotion")
        self.leds = self.session.service("ALLeds")
        self.audio_player = self.session.service("ALAudioPlayer")
        self.autonomous_blinking = self.session.service("ALAutonomousBlinking")
        self.speech_recognition = self.session.service("ALSpeechRecognition")
        try:
            self.audio_player.loadSoundSet("Aldebaran")
        except RuntimeError, error:
            self.logger.warning("Couldn't load Aldebaran soundset (" +
                                str(error) + ")")

    def get_bits_library_dict(self):
        """ The dictionary keys here will be used to call the associated
            function in the configuration file.
        """
        return {
            "setShoulderBlue": self.set_shoulder_leds_blue,
            "setShoulderInfo": self.set_shoulder_leds_info,
            "setShoulderWarning": self.set_shoulder_leds_warning,
            "setShoulderError": self.set_shoulder_leds_error,
            "setShoulderWhite": self.set_shoulder_leds_white,
            "setShoulderOff": self.set_shoulder_leds_off,
            "playSoundDialogStart": self.play_sound_dialog_start,
            "runOpenArmsDialog": self.run_open_arms_dialog,
            "playSoundDialogStop": self.play_sound_dialog_stop,
            "runCloseArmsDialog": self.run_close_arms_dialog,
            "nothing": self.nothing,
            "startBlueEyesRotation": self.start_blue_eyes_rotation,
            "stopBlueEyesRotation": self.stop_blue_eyes_rotation,
            "startEarsRotation": self.start_ears_rotation,
            "stopEarsRotation": self.stop_ears_rotation,
            "setEyesGreen": self.set_eyes_green,
            "setEyesBlue": self.set_eyes_blue,
            "setEyesWhite": self.set_eyes_white,
            "setEyesBlack": self.set_eyes_black,
            "setEarsOn": self.set_ears_on,
            "setEarsOff": self.set_ears_off,
            "stopBlink": self.stop_blink,
            "resetNormalBlink": self.reset_normal_blink,
            "blinkWithShadow": self.blink_with_shadow,
            "playSoundStartReco" : self.play_sound_start_reco,
            "playSoundStopReco" : self.play_sound_stop_reco,
        }

    def nothing(self):
        # it does nothing
        # but it does it well
        pass

    def set_shoulder_leds(self, red, green, blue):
        self.leds._fadeRGB("ChestLeds", red, green, blue, 0.0)

    def set_shoulder_leds_info(self):
        self.set_shoulder_leds(0., 1., 0.)

    def set_shoulder_leds_warning(self):
        self.set_shoulder_leds(1., 1., 0.)

    def set_shoulder_leds_error(self):
        self.set_shoulder_leds(1., 0., 0.)

    def set_shoulder_leds_blue(self):
        self.set_shoulder_leds(0., 0.5, 1.)

    def set_shoulder_leds_white(self):
        self.set_shoulder_leds(1., 1., 1.)

    def set_shoulder_leds_off(self):
        self.set_shoulder_leds(0., 0., 0.)

    def play_sound(self, name_sound):
        try:
            file_id = self.audio_player.playSoundSetFile(name_sound)
        except RuntimeError, error:
            self.logger.warning("Couldn't play sound: " + str(name_sound) +
                                " (" + str(error) + ")")

    def play_sound_with_delay(self, name_sound, delay_sec):
        delay_musec = int(1.e6 * delay_sec)
        qi.async(self.play_sound, name_sound, delay=delay_musec).wait()

    def play_sound_dialog_start(self):
        self.play_sound_with_delay("Monkey_See_someone", 0.7)

    def play_sound_dialog_stop(self):
        self.play_sound_with_delay("Monkey_Stop_dialog_V3", 0.15)

    def start_blue_eyes_rotation(self):
        self.speech_recognition._startEyesRotation()

    # We could implicitly stop the spinning in other hard-coded functions that
    # use the eye leds.  However, we may find that there are some non-hard-coded
    # bits that will touch the eyes.  We expose this stop so that other recipies
    # can explicity use it (at the cost of bringing the spaghetti one layer up)
    def stop_blue_eyes_rotation(self):
        self.speech_recognition._stopEyesRotation()

    def start_ears_rotation(self):
        self.speech_recognition._startEarsRotation()

    # see comment in stop_blue_eyes_rotation
    def stop_ears_rotation(self):
        self.speech_recognition._stopEarsRotation()

    def set_eyes_green(self):
        self.leds.fadeRGB("FaceLeds", 0x00FF00, 0.05)
        time.sleep(0.051)

    def set_eyes_blue(self):
        self.leds.fadeRGB("FaceLeds", 0x0055FF, 0.05)
        time.sleep(0.051)

    def set_eyes_white(self):
        self.leds.fadeRGB("FaceLeds", 0xFFFFFF, 0.05)
        time.sleep(0.051)

    def set_eyes_black(self):
        self.leds.fadeRGB("FaceLeds", 0x000000, 0.05)
        time.sleep(0.051)

    def set_ears_on(self):
        self.leds.fade("EarLeds", 1.0, 0.05)
        time.sleep(0.051)

    def set_ears_off(self):
        self.leds.fade("EarLeds", 0.0, 0.05)
        time.sleep(0.051)

    def switch_autonomous_blinking(self, switcher):
        self.autonomous_blinking.setEnabled(switcher)

    def stop_blink(self):
        self.switch_autonomous_blinking(False)

    def reset_normal_blink(self):
        self.switch_autonomous_blinking(True)

    def blink_with_shadow(self):
        self.leds._blinkWithShadow()

    def play_sound_start_reco(self):
        self.speech_recognition._playBipStart()

    def play_sound_stop_reco(self):
        self.speech_recognition._playBipStop()

    def run_open_arms_dialog(self):
        # Choregraphe bezier export in Python.
        names = list()
        times = list()
        keys = list()

        names.append("HipPitch")
        times.append([0.52, 1.8])
        keys.append([[0.0191986, [3, -0.173333, 0], [3, 0.426667, 0]], [-0.0375366, [3, -0.426667, 0], [3, 0, 0]]])

        names.append("HipRoll")
        times.append([0.96, 1.8])
        keys.append([[0.0645772, [3, -0.32, 0], [3, 0.28, 0]], [-0.00380628, [3, -0.28, 0], [3, 0, 0]]])

        names.append("KneePitch")
        times.append([0.52, 1.8])
        keys.append([[-0.0418879, [3, -0.173333, 0], [3, 0.426667, 0]], [-0.0147759, [3, -0.426667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.72, 1.04, 1.8])
        keys.append([[-0.432842, [3, -0.24, 0], [3, 0.106667, 0]], [-0.00872665, [3, -0.106667, 0], [3, 0.253333, 0]], [-0.197222, [3, -0.253333, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([1.8])
        keys.append([[-1.29154, [3, -0.6, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.6, 0.72, 0.88, 1.04, 1.2, 1.8])
        keys.append([[0.9, [3, -0.2, 0], [3, 0.04, 0]], [0.19, [3, -0.04, 0], [3, 0.0533333, 0]], [0.97, [3, -0.0533333, 0], [3, 0.0533333, 0]], [0.23, [3, -0.0533333, 0], [3, 0.0533333, 0]], [0.97, [3, -0.0533333, 0], [3, 0.2, 0]], [0.65993, [3, -0.2, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([1.8])
        keys.append([[1.58767, [3, -0.6, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([1.04, 1.8])
        keys.append([[0.303687, [3, -0.346667, 0], [3, 0.253333, 0]], [0.0460193, [3, -0.253333, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.6, 1.08, 1.8])
        keys.append([[-0.159557, [2, -0.2, 0.272146], [2, 0.148869, -0.20257]], [-0.951018, [3, -0.16, 0], [3, 0.24, 0]], [0.289725, [3, -0.24, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.72, 1.04, 1.88])
        keys.append([[0.432842, [3, -0.24, 0], [3, 0.106667, 0]], [0.00872665, [3, -0.106667, 0], [3, 0.28, 0]], [0.197222, [3, -0.28, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([1.88])
        keys.append([[1.29154, [3, -0.626667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.6, 0.72, 0.88, 1.04, 1.2, 1.88])
        keys.append([[0.9, [3, -0.2, 0], [3, 0.04, 0]], [0.19, [3, -0.04, 0], [3, 0.0533333, 0]], [0.97, [3, -0.0533333, 0], [3, 0.0533333, 0]], [0.23, [3, -0.0533333, 0], [3, 0.0533333, 0]], [0.97, [3, -0.0533333, 0], [3, 0.226667, 0]], [0.662566, [3, -0.226667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([1.88])
        keys.append([[1.58614, [3, -0.626667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([1.04, 1.88])
        keys.append([[-0.303687, [3, -0.346667, 0], [3, 0.28, 0]], [-0.0567572, [3, -0.28, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.6, 1.08, 1.88])
        keys.append([[0.193574, [2, -0.164545, -0.345495], [2, 0.16, 0.335951]], [0.951018, [3, -0.16, 0], [3, 0.266667, 0]], [-0.289725, [3, -0.266667, 0], [3, 0, 0]]])

        # Head Keys are de-activated because it causes jerks
        # the will be re-activated when oriented animations are released
        """
        names.append("HeadPitch")
        times.append([0.68, 1.12, 1.76])
        keys.append([[-0.267035, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.248505, [3, -0.146667, -0.00897429], [3, 0.213333, 0.0130535]], [-0.200952, [2, -0.0991692, 4.32707e-06], [2, 0, 0]]])
        """

        """
        names.append("HeadYaw")
        times.append([0.68, 1.12, 1.76])
        keys.append([[-0.00469741, [3, -0.226667, 0], [3, 0.146667, 0]], [-0.00306797, [3, -0.146667, 0], [3, 0.213333, 0]], [-0.00306797, [2, -0.213333, 0], [2, 0, 0]]])
        """

        try:
            self.motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
            print err

    def run_close_arms_dialog(self):
        # Choregraphe bezier export in Python.
        names = list()
        times = list()
        keys = list()

        # Head Keys are de-activated because it causes jerks
        # the will be re-activated when oriented animations are released

        # names.append("HeadPitch")
        # times.append([0.04, 0.88, 1.32, 1.96])
        # keys.append([[-0.207087, [3, -0.0133333, 0], [3, 0.28, 0]], [0.427606, [3, -0.28, 0], [3, 0.146667, 0]], [0.336849, [3, -0.146667, 0.0493002], [3, 0.213333, -0.0717093]], [0.0645772, [3, -0.213333, 0], [3, 0, 0]]])

        # names.append("HeadYaw")
        # times.append([0.04, 1.32, 1.96])
        # keys.append([[-0.0122719, [3, -0.0133333, 0], [3, 0.426667, 0]], [0.481711, [3, -0.426667, 0], [3, 0.213333, 0]], [0.481711, [3, -0.213333, 0], [3, 0, 0]]])

        names.append("HipPitch")
        times.append([0.04, 0.64, 1.32, 2.24])
        keys.append([[-0.0260777, [3, -0.0133333, 0], [3, 0.2, 0]], [0.0191986, [3, -0.2, 0], [3, 0.226667, 0]], [0.00920391, [3, -0.226667, 0.00803749], [3, 0.306667, -0.0108743]], [-0.0375366, [3, -0.306667, 0], [3, 0, 0]]])

        names.append("HipRoll")
        times.append([0.04, 0.8, 1.24, 2.24])
        keys.append([[-0.0122719, [3, -0.0133333, 0], [3, 0.253333, 0]], [0.0927517, [3, -0.253333, -0.000259253], [3, 0.146667, 0.000150094]], [0.0929018, [3, -0.146667, 0], [3, 0.333333, 0]], [-0.00380628, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("KneePitch")
        times.append([0.04, 0.64, 1.32, 2.24])
        keys.append([[-0.00920391, [3, -0.0133333, 0], [3, 0.2, 0]], [-0.0418879, [3, -0.2, 0], [3, 0.226667, 0]], [-0.0214758, [3, -0.226667, -0.00384086], [3, 0.306667, 0.00519646]], [-0.0147759, [3, -0.306667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.04, 0.68, 1.2, 2])
        keys.append([[-0.518485, [3, -0.0133333, 0], [3, 0.213333, 0]], [-0.626573, [3, -0.213333, 0], [3, 0.173333, 0]], [-0.3735, [3, -0.173333, -0.0456077], [3, 0.266667, 0.0701658]], [-0.279253, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.04, 0.28, 0.88, 1.76])
        keys.append([[-1.21798, [3, -0.0133333, 0], [3, 0.08, 0]], [-1.7044, [3, -0.08, 0], [3, 0.2, 0]], [-0.993092, [3, -0.2, 0], [3, 0.293333, 0]], [-1.29154, [3, -0.293333, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.04, 0.6, 1.48, 1.96])
        keys.append([[0.595782, [3, -0.0133333, 0], [3, 0.186667, 0]], [0.93, [3, -0.186667, 0], [3, 0.293333, 0]], [0.02, [3, -0.293333, 0], [3, 0.16, 0]], [0.52, [3, -0.16, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.04, 0.68, 1.88])
        keys.append([[1.55699, [3, -0.0133333, 0], [3, 0.213333, 0]], [1.21999, [3, -0.213333, 0], [3, 0.4, 0]], [1.56159, [3, -0.4, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.04, 0.56, 1.44, 1.88])
        keys.append([[0.139592, [3, -0.0133333, 0], [3, 0.173333, 0]], [0.289725, [3, -0.173333, 0], [3, 0.293333, 0]], [0.108881, [3, -0.293333, 0], [3, 0.146667, 0]], [0.119651, [3, -0.146667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.04, 0.44, 0.88, 1.88])
        keys.append([[0.022968, [3, -0.0133333, 0], [3, 0.133333, 0]], [-0.18596, [3, -0.133333, 0], [3, 0.146667, 0]], [0.232129, [3, -0.146667, -0.0573376], [3, 0.333333, 0.130313]], [0.376991, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.04, 0.68, 1.2, 2])
        keys.append([[0.518485, [3, -0.0133333, 0], [3, 0.213333, 0]], [0.626573, [3, -0.213333, 0], [3, 0.173333, 0]], [0.3735, [3, -0.173333, 0.0456077], [3, 0.266667, -0.0701658]], [0.279253, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.04, 0.28, 0.88, 1.76])
        keys.append([[1.21798, [3, -0.0133333, 0], [3, 0.08, 0]], [1.7044, [3, -0.08, 0], [3, 0.2, 0]], [0.993092, [3, -0.2, 0], [3, 0.293333, 0]], [1.29154, [3, -0.293333, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.04, 0.6, 1.48, 1.96])
        keys.append([[0.595782, [3, -0.0133333, 0], [3, 0.186667, 0]], [0.93, [3, -0.186667, 0], [3, 0.293333, 0]], [0.02, [3, -0.293333, 0], [3, 0.16, 0]], [0.52, [3, -0.16, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.04, 0.68, 1.88])
        keys.append([[1.55699, [3, -0.0133333, 0], [3, 0.213333, 0]], [1.21999, [3, -0.213333, 0], [3, 0.4, 0]], [1.56159, [3, -0.4, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.04, 0.56, 1.44, 1.88])
        keys.append([[-0.139592, [3, -0.0133333, 0], [3, 0.173333, 0]], [-0.289725, [3, -0.173333, 0], [3, 0.293333, 0]], [-0.108881, [3, -0.293333, 0], [3, 0.146667, 0]], [-0.119651, [3, -0.146667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.04, 0.44, 0.88, 1.88])
        keys.append([[-0.022968, [3, -0.0133333, 0], [3, 0.133333, 0]], [0.18596, [3, -0.133333, 0], [3, 0.146667, 0]], [-0.232129, [3, -0.146667, 0.0573376], [3, 0.333333, -0.130313]], [-0.376991, [3, -0.333333, 0], [3, 0, 0]]])

        try:
            self.motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
            print err
